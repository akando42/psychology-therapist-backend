/**
 * 
 * @api {post} /admin/login Admin Login
 * @apiDescription This is used for login into different user types(admin/sales/hr)
 * @apiGroup universal
 * @apiVersion  0.1.0
 * 
 * 
 * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
 * 
 * @@apiSuccess (200) {String} sessionToken Use this token for all the other requests for HRs
 * @@apiSuccess (200) {String} role admin/hr/sales
 * @apiSuccess (200) {String} image Base64 Image
 * 
 * @apiParamExample  {type} Request-Example:
 * {
        accountToken:<>
        email:admin@therapyondemand.io
        password:Admin@12345
 * }
 * 
 * 
 * @apiSuccessExample {type} Success-Response:
 * {
       data:{
            sessionToken:<>
            role:"admin",
            fullName:<>
            firstName:<>
            lastName:<>
            email:<>
            image:<>
            phone:<>
        }
        message:""
 * }
 * 
 * 
 */


 /**
  * 
  * @api {post} /get/profile My Profile Details
  * @apiDescription This Api is used to get the logged in users profile details
  * @apiGroup universal
  * @apiVersion  0.1.1
  * 
  * 
  * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
  * @apiParam  {String} sessionToken This is the token which u=you get while calling the admin/login apis
  *
  * @apiSuccess (200) {String} role Role of the user (admin/hr/sales)
  * @apiSuccess (200) {String} image Its give a relatice address of image.. for absolute combine it with the backend baseurl
  * 
  * @apiParamExample  {type} Request-Example:
  * {
        accountToken:<>
        sessionToken:<>
  * }
  * 
  * 
  * @apiSuccessExample {type} Success-Response:
 * {
       data:{
            role:<>
            fullName:<>
            firstName:<>
            lastName:<>
            email:<>
			image:<>
			phone:<>
			lattitude:<>
			longitude:<>
			address:<>
        }
        message:""
 * }
  * 
  * 
  */

/**
  * 
  * @api {post} /edit/profile Edit Profile Details
  * @apiDescription This Api is used to edit the users profile. Only put the parameters which you want to edit
  * @apiGroup universal
  * @apiVersion  0.1.1
  * 
  * 
  * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
  * @apiParam  {String} sessionToken This is the token which u=you get while calling the admin/login apis
  *
  * @apiSuccess (200) {String} role Role of the user (admin/hr/sales)
  * 
  * @apiParamExample  {type} Request-Example:
  * {
        accountToken:<>
		sessionToken:<>
		firstName:"FirstName",
		lastName:"LastName",
		phone:"Phone",
		image:<Base 64 encoded>,
		lattitude:<>
		longitude:<>
		address:<>
		password:{
			oldPassword:<>
			newPassword:<>
		}
  * }
  * 
  * 
  * @apiSuccessExample {type} Success-Response:
  * {
        message:<Successfully updated the informations>
  * }
  * 
  * 
  */

  /**
  * 
  * @api {post} /admin/decode/email Decode the email code
  * @apiDescription It is used to decode the code send with the redirect url
  * @apiGroup universal
  * @apiVersion  0.1.0
  * 
  * 
  * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
  * @apiParam  {String} code This is the code that was sent to the email as a get request parameter
  * @apiParam  {String} email Email is also sent as a get paramter in the link sent
  *
  * @apiSuccess (200) {String} role Role of the user (admin/hr/sales)
  * 
  * @apiParamExample  {type} Request-Example:
  * {
        accountToken:<>
        code:<>
        email:<>
  * }
  * 
  * 
  * @apiSuccessExample {type} Success-Response:
  * {
        data:{
            email:<The email Address>
            firstName:<>
            lastName:<>
            role:<>
            registerToken:<Use this token to register the User in the Next API calls>
        }
  * }
  * 
  * 
  */
  

/**
  * 
  * @api {post} /admin/add_user Add new person to admin cabinet
  * @apiDescription Sends an email to the specified Email ID for profile creation
  * @apiGroup admin
  * @apiVersion  0.1.0
  * 
  * 
  * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
  * @apiParam  {String} sessionToken This is the token which u=you get while calling the admin/login apis
  * @apiParam  {String} role The role of the new user getting added
  * @apiParam  {String} email This should end with @therapyondemand.io
  * @apiParam  {String} callbackUrl Absolute URL to which the api should redirect. Note the url should not end with "/"
  *
  * 
  * @apiParamExample  {type} Request-Example:
  * {
            accountToken:<>
            sessionToken:<>
            role:<hr/sales>
            email:<email-address>@therapyondemand.io
            firstName:<>
            lastName:<>
            phone:<>
            callbackUrl:<>
  * }
  * 
  * 
  * @apiSuccessExample {type} Success-Response:
  * {
        message:"Email Successfully sent to the user".
  * }
  * 
  * 
  */

/**
  * 
  * @api {post} /reset/password Reset Password - Send Link
  * @apiDescription This Api is used to send a reset password link for a given user
  * @apiGroup universal
  * @apiVersion  0.1.0
  * 
  * 
  * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
  * @apiParam  {String} email Email of the user who has forgotten the password
  *
  * 
  * @apiParamExample  {type} Request-Example:
  * {
        accountToken:<>
        email:<>
  * }
  * 
  * 
  * @apiSuccessExample {type} Success-Response:
  * {
        message:"We have successfully sent the reset link on our email address"
  * }
  * 
  * 
  */


  /**
  * 
  * @api {post} /set/password Set a new password
  * @apiDescription This Api is used when we redirect from the link sent to the user and the user has entered a new password to set
  * @apiGroup universal
  * @apiVersion  0.1.0
  * 
  * 
  * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
  * @apiParam  {String} resetCode This code was sent as a get parameter in the reset link sent to the user's email ID
  * @apiParam  {String} password The new password that the user wants to set.
  *
  * 
  * @apiParamExample  {type} Request-Example:
  * 
  *{
		accountToken:<>
		email:<>
		resetCode:<>
		password:<The new password>     
  *}
  * 
  * 
  * @apiSuccessExample {type} Success-Response:
  * {
        message:"Your password has been successfully reset!!"
  * }
  * 
  * 
  */

  /**
  * 
  * @api {post} /admon/block Blocking a user
  * @apiDescription This Api is used to block a specified user from the Admin's Cabinet
  * @apiGroup admin
  * @apiVersion  0.1.0
  * 
  * 
  * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
  * @apiParam  {String} sessionToken This is the token which u=you get while calling the admin/login apis
  * @apiParam  {String} email The email Id of the user you want to block
  *
  * 
  * @apiParamExample  {type} Request-Example:
  *{
		accountToken:<>
		sessionToken:<>
		email:<>
  *}
  * 
  * 
  * @apiSuccessExample {type} Success-Response:
  * {
        message:"The email has been successfully removed"
  * }
  * 
  * 
  */

/**
  * 
  * @api {post} /admin/unblock Unblock  User
  * @apiDescription This Api is used to unblock an already blocked user from the Admin's Cabinet
  * @apiGroup admin
  * @apiVersion  0.1.0
  * 
  * 
  * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
  * @apiParam  {String} sessionToken This is the token which u=you get while calling the admin/login apis
  * @apiParam  {String} email The email Id of the user you want to unblock
  *
  * 
  * @apiParamExample  {type} Request-Example:
  *{
		accountToken:<>
		sessionToken:<>
		email:<>
  *}
  * 
  * 
  * @apiSuccessExample {type} Success-Response:
  * {
        message:"The HR/Admin has been successfully unblocked"
  * }
  * 
  * 
  */

/**
  * 
  * @api {post} /admin/list_users List users from Admin Cabinet
  * @apiDescription This Api is used to list the users with the given filters
  * @apiGroup admin
  * @apiVersion  0.1.0
  * 
  * 
  * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
  * @apiParam  {String} sessionToken This is the token which u=you get while calling the admin/login apis
  * @apiParam  {String} searchKey Search key if any. Or else empty
  * @apiParam  {String} roles An Array of what all roles you want to see. Empty if there is no such filters.
  * @apiParam  {String} status An Array of accountStatus integer codes. See the codes in datamodel.ts file under the variable "accountStatus". Empty if no such filters
  * @apiParam  {String} paging An integer representing the number of pages in the result. Each page will contain 10 results.
  *
  * @apiSuccess (200) {String} pages Total number of pages in the list. Each page contains 10 entries
  * 
  * @apiParamExample  {type} Request-Example:
  *{
		accountToken:<>
		sessionToken:<>
		searchKey:"rahul"
		roles:["sales", "hr"] 
		status:[] 
		paging:0
  *}
  * 
  * 
  * @apiSuccessExample {type} Success-Response:
  * {
        data:{
			pages:<total-no-of-pages>
			users:[
				{
					id:<>
					firstName:<>
					lastName:<>
					email:<>
					role:<hr/sales>
					status:<0,1,2,3...>
				},
				{
					id:<>
					firstName:<>
					lastName:<>
					email:<>
					role:<hr/sales>
					status:<0,1,2,3...>
				},....//so on
			]
		}
		message:"Data fetched successfully"
  * }
  * 
  * 
  */

 /**
  * 
  * @api {post} /admin/get_user Get Profile info(Any User)
  * @apiDescription This Api is used to get profile info of a given profile
  * @apiGroup admin
  * @apiVersion  0.1.1
  * 
  * 
  * @apiParam  {String} accountToken This is the account token generated by web/token endpoint
  * @apiParam  {String} sessionToken This is the token which u=you get while calling the admin/login apis
  * @apiParam  {String} id This is the auto-generated id of the given user
  *
  * @apiSuccess (200) {String} role Role of the user (admin/hr/sales)
  * @apiSuccess (200) {String} image Relative address to the backend. If /profile/xyz.png the absolute url will be http(s)://<baseUrl>/profile/xyz.png
  * 
  * @apiParamExample  {type} Request-Example:
  *{
		accountToken:<>
		sessionToken:<>
		id:<>
  *}
  * 
  * 
  * @apiSuccessExample {type} Success-Response:
  * {
        data:{
			id:<>
			firstName:<>
			lastName:<>
			email:<>
			role:<hr/sales>
			image:<>
			phone:<>
			lattitude:<>
			longitude:<>
			address:<>
			status:<0,1,2,3...>
		}
		message:"Data fetched successfully"
  * }
  * 
  * 
  */