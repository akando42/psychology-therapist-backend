
/token/providers:
    get:
      summary: 
        returns and validates an account token
      produces:
        This endGETpoint doesn't return any values.
      parameters:
        This endpoint doesn't receive any parameters.
      responses:
        200:
        {
          data:{
            access_token:<store this and send in all requests>
          }
          message: The token has been validated or set successfully.
        }
          
/provider/signup
    post:
        summary: registers a provider in the system
        produces:
            - application/json
        parameters:
            - access_token
              use the access token
            - firstName
              description: First name of the provider
              type: string
              minlength: 2
              maxlength: 20
            - lastName
              description: Lastname of the provider
              type: string
              minlength: 2
              maxlength: 40
            - qualifications
              description: Highest Qualification Recieved
              type: string
              minlength:2
            - experience
              description: Text describing the work experience of the provider
              type: string
              minlength: 3
            - resume
              description: Name of the temporary uploaded file containing the resume/CV of the provider
              type: string
              minlength: 10
            - email
              description: Email address of the provider
              type: string
              minlength: 6
              maxlength: 255
            - phone
              description: Phone number of the provider
              type: number
              minlength: 6
              maxlength: 20
              format: [0-9]+
            - password
              description: Account password for the provider
              minlength: 8
              maxlength: 20
              format: Must contain a capital letter, a lower case letter, a number and a special character
        responses:
            200
                description:
                    The provider has been registered successfuly and verification email has been sent.
            400
                description:
                    Invalid input, the parameters were not valid.
            409
                description:
                    There is already a provider registered with the same email address.
            403
                description:
                    The account_token is not valid.
/provider/login
    post:
        summary: validates a provider's credentials
        description: 
            session token is encrypted as
			jsonStr={
                    ip:ProvidersUtility.getIPAddress(req),
                    date:date,
                    origin:req.get("origin"),
                    providersId : -1,
                    type:"Admin"
                }
        produces:
            - application/json
        parameters:
            - account_token : <use the account token>
            - email
              description: Email address of the provider
              type: string
              minlength: 6
              maxlength: 255
            - password
              description: Account password for the provider
              minlength: 8
              maxlength: 20
              format: Must contain a capital letter, a lower case letter, a number and a special character
        responses:
            200
              {
                data:{
                  session_token:"Use this token for all the other requests"
                  <all profile details>
                }
                message:""
              }
           
/token/providers:
    get:
      summary: 
        returns and validates an account token
      produces:
        This endGETpoint doesn't return any values.
      parameters:
        This endpoint doesn't receive any parameters.
      responses:
        200:
        {
          data:{
            access_token:<store this and send in all requests>
          }
          message: The token has been validated or set successfully.
        }
          
/provider/signup
    post:
        summary: registers a provider in the system
        description: 
            Receives all the provider information and verifies that the information provided is valid and correct, it checks if there is already a provider registered with the same email address and it validates the "account_token". If all the checks are passed, it will proceed to add the new provider to the database. The provider will be added to the database as unverified, and it will generate a temporary link to validate the email address which will be sent to the newly registered provider.
        produces:
            - application/json
        parameters:
            - access_token
              use the access token
            - firstName
              description: First name of the provider
              type: string
              minlength: 2
              maxlength: 20
            - lastName
              description: Lastname of the provider
              type: string
              minlength: 2
              maxlength: 40
            - qualifications
              description: Array with the ids of the provider's qualifications
              type: Array:string
              minlength:1
            - experience
              description: Text describing the work experience of the provider
              type: string
              minlength: 10
            - resume
              description: Name of the temporary uploaded file containing the resume/CV of the provider
              type: string
              minlength: 10
            - email
              description: Email address of the provider
              type: string
              minlength: 6
              maxlength: 255
            - phone
              description: Phone number of the provider
              type: number
              minlength: 6
              maxlength: 20
              format: [0-9]+
            - password
              description: Account password for the provider
              minlength: 8
              maxlength: 20
              format: Must contain a capital letter, a lower case letter, a number and a special character
        responses:
            200
                description:
                    The provider has been registered successfuly and verification email has been sent.
            400
                description:
                    Invalid input, the parameters were not valid.
            409
                description:
                    There is already a provider registered with the same email address.
            403
                description:
                    The account_token is not valid.
/provider/login
    post:
        summary: validates a provider's credentials
        description: 
            Receives all the login information of a provider, and validates them along with the account_token. If the login information is correct, it will create a cookie named session_token in the provider's browser. The session_token cookie will be valid for 30 minutes, and will depend on the ID of the provider in the database, the IP address from where the request originated, the domain name from the request is being made, the date when the request was made, and the signature of the provider in the database. The session_token cookie will be encrypted using AES 256 symetric encription, using a 32 bit key, the key will be obtained from a combination of the provider ID in the database and the date when the provider signed up. The token will be the encrypted value of a JSON object containing provider: the ID of the provider in the database, date: the date when the cookie was created, ip: the IP address that originated the request, domain: the domain name that originated the request, footprint: the last 10 digits of the provider signature in the database, signature: the result of encrypting using md5 all the values combined.
        produces:
            - application/json
        parameters:
            - account_token : <use the account token>
            - email
              description: Email address of the provider
              type: string
              minlength: 6
              maxlength: 255
            - password
              description: Account password for the provider
              minlength: 8
              maxlength: 20
              format: Must contain a capital letter, a lower case letter, a number and a special character
        responses:
            200
              {
                data:{
                  session_token:"Use this token for all the other requests"
                  <all profile details>
                }
                message: The login credentials are valid and the session_token cookie has been set.
              }
                
            400
                description:
                    Invalid input, the login credentials are not valid.
            403
                description:
                    The account_token is not valid.
			

provider/get/notification
	post
		summary: Get all the notification for the user
		request:
			access_token:<>
			session_token:<>
		response:
		200:
			{
				data:{
					unreadCount:<Number of unread notifications>
					notifications:{
						<notifID>:{
							content:<Content>
							dateTime:<YYYY/MM/DD HH:mm:ss>
							isRead:<true|false>
						}
					}
				}
				message:"successfully accepted/rejected the applications"
			}


provider/set/notification
	post
		summary: Set the notification to be read
		request:
			access_token:<>
			session_token:<>
			notificationID:<>
		response:
		200:
			{
				message:"successfully marked the notification as read"
			}


provider/upload/docs
	post
		summary: Get all the profile details
		request:
			access_token:<>
			session_token:<>
			docs:[
				{
					docTitle:<>
					docContent:<Base-64>
				},
				...
			]
		response:
		200:
			{
				message:<Successfully uploaded the docs>
			}


provider/get/clients
	post
		summary: Get all the clients
		request:
			access_token:<>
			session_token:<>
		response:
		200:
			{
				data:{
					<clientId>:{
						name:<>
						image:<Image Link>
						lastBookTime:<Date|time>
						totalEarning:<>
						country:<>
					}
				}
				message:<Successfully Fetched all the Clients>
			}


provider/get/profile
	post
		summary: Get all the profile details
		request:
			access_token:<>
			session_token:<>
		response:
		200:
			{
				data:{
					firstName:"FirstName",
					lastName:"LastName",
					email:"EmailID",
					phone:"Phone",
					image:<Image Link>,
					experience:"Experience",
					qualifications:"Qualifications",
					resume:<Image Link>,
					status:<Please check DataModel to know the integer to status mapping>
				}
				message:<Successfully Fetched all the Profile Details>
			}

provider/set/profile
	post
		summary: Get all the profile details. Only put the information you want to update
		request:
			access_token:<>
			session_token:<>
			firstName:"FirstName",
			lastName:"LastName",
			email:"EmailID",
			phone:"Phone",
			image:<Base 64 encoded>,
			experience:"Experience",
			qualifications:"Qualifications",
			resume:<Base 64 encoded>,
			password:{
				oldPassword:<>
				newPassword:<>
			}
		response:
		200:
			{
				message:<Successfully updated the informations>
			}


provider/get/bookings/present
provider/get/bookings/past
	post
		summary: Get all the profile details
		request:
			access_token:<>
			session_token:<>
		response:
		200:
			{
				data:{
					<sessionId>:{
						name:<Name of the User>
						phone:<Phone No.>
						email:<Email Id>
						gender:<>

						addressLatt:<>
						addressLong:<>
						addressDescriiption:<>
						parkingInfo:<>
						
						massageType:"MassageType",
						massageLength:"MassageLength",
						dateTime:"SessionDateTime",
						equipements:"Equipements",
						pets:"Pets",
						medicalInformation:"MedicalInformation"
					},..
				}
				message:<Successfully Fetched bookings details>
			}

provider/get/payments
	post
		summary:<Get the summary of the payments>
		request:
			access_token:<>
			session_token:<>
		response:
		200:
			{
				data:{
					<paymentID>:{
						clientName:<>
						dateTime:<>
						amount:<>
						transactionId:<>
					},..
				}
			}
