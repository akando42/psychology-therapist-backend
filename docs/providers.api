
/token/providers:
    get:
      summary: 
        returns and validates an account token
      produces:
        This endGETpoint doesn't return any values.
      parameters:
        This endpoint doesn't receive any parameters.
      responses:
        200:
        {
          data:{
            accountToken:<store this and send in all requests>
          }
          message: The token has been validated or set successfully.
        }
          
/provider/signup
    post:
        summary: registers a provider in the system
        produces:
            - application/json
        parameters:
            - accountToken
              use the access token
            - firstName
              description: First name of the provider
              type: string
              minlength: 2
              maxlength: 20
            - lastName
              description: Lastname of the provider
              type: string
              minlength: 2
              maxlength: 40
            - qualifications
              description: Highest Qualification Recieved
              type: string
              minlength:2
            - experience
              description: Text describing the work experience of the provider
              type: string
              minlength: 3
            - resume
              description: Name of the temporary uploaded file containing the resume/CV of the provider
              type: string
              minlength: 10
            - email
              description: Email address of the provider
              type: string
              minlength: 6
              maxlength: 255
            - phone
              description: Phone number of the provider
              type: number
              minlength: 6
              maxlength: 20
              format: [0-9]+
            - password
              description: Account password for the provider
              minlength: 8
              maxlength: 20
              format: Must contain a capital letter, a lower case letter, a number and a special character
						- lattitude
						- longitude
							location of the user
        responses:
            200
                description:
                    The provider has been registered successfuly and verification email has been sent.
            400
                description:
                    Invalid input, the parameters were not valid.
            409
                description:
                    There is already a provider registered with the same email address.
            403
                description:
                    The accountToken is not valid.
/provider/login
    post:
        summary: validates a provider's credentials
        description: 
            session token is encrypted as
						jsonStr={
							ip:ProvidersUtility.getIPAddress(req),
							date:date,
							origin:req.get("origin"),
							providersId : <ID>,
							type:"Provider"
            }
        produces:
            - application/json
        parameters:
            - accountToken : <use the account token>
            - email
              description: Email address of the provider
              type: string
              minlength: 6
              maxlength: 255
            - password
              description: Account password for the provider
              minlength: 8
              maxlength: 20
              format: Must contain a capital letter, a lower case letter, a number and a special character
        responses:
            200
              {
                data:{
										admin:<false>
                  	sessionToken:"Use this token for all the other requests"
                  <all profile details>
                }
                message:""
              }
           

provider/get/notification
	post
		summary: Get all the notification for the user
		request:
			accountToken:<>
			sessionToken:<>
		response:
		200:
			{
				data:{
					unreadCount:<Number of unread notifications>
					notifications:{
						<notifID>:{
							notificationID:<>
							content:<Content>
							dateTime:<YYYY/MM/DD HH:mm:ss>
							isRead:<true|false>
						}
					}
				}
				message:"successfully accepted/rejected the applications"
			}


provider/set/notification
	post
		summary: Set the notification to be read
		request:
			accountToken:<>
			sessionToken:<>
			notificationID:<>
		response:
		200:
			{
				message:"successfully marked the notification as read"
			}


provider/upload/docs
	post
		summary: Get all the profile details
		request:
			accountToken:<>
			sessionToken:<>
			docs:[
				{
					docTitle:<>
					docContent:<Base-64>
				},
				...
			]
		response:
		200:
			{
				message:<Successfully uploaded the docs>
			}


provider/get/clients
	post
		summary: Get all the clients
		request:
			accountToken:<>
			sessionToken:<>
		response:
		200:
			{
				data:{
					<clientId>:{
						userID:<>
						firstName:<>
						lastName:<>
						image:<Image Link>
						lastBookTime:<Date|time>
						totalBookings:<>
					}
				}
				message:<Successfully Fetched all the Clients>
			}


provider/get/profile
	post
		summary: Get all the profile details
		request:
			accountToken:<>
			sessionToken:<>
		response:
		200:
			{
				data:{
					firstName:"FirstName",
					lastName:"LastName",
					email:"EmailID",
					phone:"Phone",
					image:<Image Link>,
					experience:"Experience",
					qualifications:"Qualifications",
					resume:<Image Link>,
					status:<Please check DataModel to know the integer to status mapping>
				}
				message:<Successfully Fetched all the Profile Details>
			}

provider/set/profile
	post
		summary: Get all the profile details. Only put the information you want to update
		request:
			accountToken:<>
			sessionToken:<>
			firstName:"FirstName",
			lastName:"LastName",
			email:"EmailID",
			phone:"Phone",
			image:<Base 64 encoded>,
			experience:"Experience",
			qualifications:"Qualifications",
			resume:<Base 64 encoded>,
			password:{
				oldPassword:<>
				newPassword:<>
			}
		response:
		200:
			{
				message:<Successfully updated the informations>
			}


provider/get/bookings/present
provider/get/bookings/past
	post
		summary: Get all the profile details
		request:
			accountToken:<>
			sessionToken:<>
		response:
		200:
			{
				data:{
					<sessionId>:{
						name:<Name of the User>
						phone:<Phone No.>
						email:<Email Id>
						gender:<>

						addressLatt:<>
						addressLong:<>
						address:<>
						parkingInfo:<>
						
						sesssionID:<>
						massageType:"MassageType",
						massageLength:"MassageLength",
						dateTime:"SessionDateTime",
						equipements:"Equipements",
						pets:"Pets",
						medicalInformation:"MedicalInformation"
					},..
				}
				message:<Successfully Fetched bookings details>
			}

provider/get/payments
	post
		summary:<Get the summary of the payments>
		request:
			accountToken:<>
			sessionToken:<>
		response:
		200:
			{
				data:{
					<paymentID>:{
						paymentID:<>
						clientName:<>
						dateTime:<>
						amount:<>
						transactionId:<>
					},..
				}
			}
